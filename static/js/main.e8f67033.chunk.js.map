{"version":3,"sources":["components/SearchBox.js","components/LocationWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","className","type","placeholder","onChange","e","setQuery","target","value","query","onKeyPress","search","LocationWeather","weather","dateBuilder","name","sys","country","Date","Math","round","main","temp","api","App","useState","setWeather","event","key","fetch","then","res","json","result","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sLAiBeA,EAfG,SAACC,GACf,OACA,yBAAKC,UAAU,cACX,2BACIC,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIL,EAAMM,SAASD,EAAEE,OAAOC,QACvCA,MAAOR,EAAMS,MACbC,WAAYV,EAAMW,WCQfC,EAjBS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,YAChC,OACI,6BACI,yBAAKb,UAAU,gBACX,yBAAKA,UAAU,YAAYY,EAAQE,KAAnC,KAA2CF,EAAQG,IAAIC,SACvD,yBAAKhB,UAAU,QAAQa,EAAY,IAAII,QAE3C,yBAAKjB,UAAU,eACX,yBAAKA,UAAU,QACdkB,KAAKC,MAAMP,EAAQQ,KAAKC,MADzB,SAGA,yBAAKrB,UAAU,WAAWY,EAAQA,QAAQ,GAAGQ,SCVvDE,EACC,mCADDA,EAEE,2CAoDOC,MAjDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENhB,EAFM,KAECH,EAFD,OAGiBmB,mBAAS,IAH1B,mBAGNZ,EAHM,KAGGa,EAHH,KA4Bb,OACE,yBAAKzB,UAAmC,oBAAhBY,EAAQQ,MAAyBR,EAAQQ,KAAKC,KAAO,GAAM,WAAsB,OACvG,0BAAMrB,UAAmC,oBAAhBY,EAAQQ,MAAyBR,EAAQQ,KAAKC,KAAO,GAAM,YAAwB,QAC1G,yBAAKrB,UAAU,WACb,kBAAC,EAAD,CACEQ,MAAOA,EACPE,OA7BK,SAAAgB,GACK,UAAdA,EAAMC,KACRC,MAAM,GAAD,OAAIN,EAAJ,qBAAyBd,EAAzB,+BAAqDc,IACvDO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJP,EAAWO,GACX3B,EAAS,QAwBPA,SAAUA,IAEa,oBAAhBO,EAAQQ,KACf,kBAAC,EAAD,CACER,QAASA,EACTC,YAxBQ,SAAAoB,GAClB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,MAiBvB,OCtCKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e8f67033.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n    return(\r\n    <div className=\"search-box\">\r\n        <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search...\"\r\n            onChange={e => props.setQuery(e.target.value)}\r\n            value={props.query}\r\n            onKeyPress={props.search}\r\n          />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst LocationWeather = ({ weather, dateBuilder}) => {\r\n    return(\r\n        <div>\r\n            <div className=\"location-box\">\r\n                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\r\n                <div className=\"date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"weather-box\">\r\n                <div className=\"temp\">\r\n                {Math.round(weather.main.temp)}Â°C\r\n                </div>\r\n                <div className=\"weather\">{weather.weather[0].main}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationWeather;","import React, { useState } from 'react';\nimport SearchBox from './components/SearchBox';\nimport LocationWeather from './components/LocationWeather'\nconst api = {\n  key: \"5ef8d679c6f2e0c25241e354a96f4d6b\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = event => {\n    if (event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n        });\n    }\n  }\n\n  const dateBuilder = d => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    \n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? \"app warm\" : \"app\") : \"app\" }>\n      <main className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? \"main warm\" : \"main\") : \"main\" }>\n        <div className=\"opacity\">\n          <SearchBox \n            query={query} \n            search={search} \n            setQuery={setQuery}\n          />\n          {(typeof weather.main != \"undefined\") ? (\n            <LocationWeather \n              weather={weather}\n              dateBuilder={dateBuilder}\n            />\n          ) : ('')}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}